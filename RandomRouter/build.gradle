apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'com.google.protobuf'
apply plugin: 'idea'
apply plugin: 'application'

version '1.0-SNAPSHOT'

repositories {
    maven { url "https://plugins.gradle.org/m2/" }
    mavenCentral()
}

buildscript {
    ext.kotlin_version = '1.3.40'
    ext.ktor_version = '1.2.4'

    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

mainClassName = 'com.moventum.randomrouter.MainKt'

dependencies {
    compile 'com.google.protobuf:protobuf-java:3.0.0'
    compile("io.grpc:grpc-netty:1.14.0")
    compile("io.grpc:grpc-protobuf:1.14.0")
    compile("io.grpc:grpc-stub:1.14.0")
    compile("com.natpryce:konfig:1.6.1.0")
    compile("org.slf4j:log4j-over-slf4j:1.7.25")
    compile("io.github.microutils:kotlin-logging:1.4.6")
    compile("ch.qos.logback:logback-classic:1.2.1")
    compile("io.ktor:ktor-server-netty:$ktor_version")
    compile("io.ktor:ktor-jackson:$ktor_version")

    if (JavaVersion.current().isJava9Compatible()) {
        // Workaround for @javax.annotation.Generated
        // see: https://github.com/grpc/grpc-java/issues/3633
        compile 'javax.annotation:javax.annotation-api:1.3.1'
    }
    // Extra proto source files besides the ones residing under
    // "src/main".
    protobuf files("protos/")

    testCompile 'junit:junit:4.12'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}

protobuf {
    protoc {
        // The artifact spec for the Protobuf Compiler
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }
    plugins {
        // Optional: an artifact spec for a protoc plugin, with "grpc" as
        // the identifier, which can be referred to in the "plugins"
        // container of the "generateProtoTasks" closure.
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.0.0-pre2'
        }
    }
    generateProtoTasks {
        ofSourceSet('main')*.plugins {
            // Apply the "grpc" plugin whose spec is defined above, without
            // options.  Note the braces cannot be omitted, otherwise the
            // plugin will not be added. This is because of the implicit way
            // NamedDomainObjectContainer binds the methods.
            grpc { }
        }
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
repositories {
    jcenter()
}