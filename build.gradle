apply plugin: 'java'
apply plugin: 'com.google.protobuf'
apply plugin: 'idea'
apply plugin: 'application'

version '1.0-SNAPSHOT'

repositories {
    maven { url "https://plugins.gradle.org/m2/" }
}

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'
    }
}

dependencies {
    compile 'com.google.protobuf:protobuf-java:3.0.0'
    compile 'io.grpc:grpc-stub:1.0.0-pre2'
    compile 'io.grpc:grpc-protobuf:1.0.0-pre2'
    if (JavaVersion.current().isJava9Compatible()) {
        // Workaround for @javax.annotation.Generated
        // see: https://github.com/grpc/grpc-java/issues/3633
        compile 'javax.annotation:javax.annotation-api:1.3.1'
    }
    // Extra proto source files besides the ones residing under
    // "src/main".
    protobuf files("protos/")

    testCompile 'junit:junit:4.12'
}

protobuf {
    protoc {
        // The artifact spec for the Protobuf Compiler
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }
    plugins {
        // Optional: an artifact spec for a protoc plugin, with "grpc" as
        // the identifier, which can be referred to in the "plugins"
        // container of the "generateProtoTasks" closure.
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.0.0-pre2'
        }
    }
//    generateProtoTasks {
//        ofSourceSet('main')*.plugins {
//            // Apply the "grpc" plugin whose spec is defined above, without
//            // options.  Note the braces cannot be omitted, otherwise the
//            // plugin will not be added. This is because of the implicit way
//            // NamedDomainObjectContainer binds the methods.
//            grpc { }
//        }
//    }
}
